https://dbdiagram.io/home	创建数据库脚本

docker pull <image_name>:<tag>”我们使用冒号来分隔图像名称及其标签（或版本）。----下载镜像，镜像可以启动多个容器

在 shell（外壳） 内部，我们可以访问所有标准的 Linux 命令。
container还提供CLI指令---从 shell 与 postgres 服务器交互
 psql 是与 PostgreSQL 数据库进行交互的主要方式之一
\q:退出psql终端命令行


基础linux命令：
mkdir -p 文件夹-----》-p：-p 选项表示递归地创建目录，即如果父目录不存在，也一并创建
pwd（print working directory）:显示当前工作目录的完整路径。
ls -l:	 "list" 的缩写，用于列出目录中的文件和子目录，-l 选项表示以详细列表的方式显示文件信息。



docker run --name postgres12 -p 5432:5432 -e POSTGRES_USER=root -e POSTGRES_PASSWORD=wyx06151 -d postgres:12-alpine
启动新postgres容器
migrate create -ext sql -dir db/migration -seq init_schema:-----创建一个迁移文件，sql后缀（extension），db/migration文件夹             迁移连续seq（sequentially）版本号(根据前面的版本号递增）

docker exec -it postgres12 /bin/sh	访问postgres12的shell（可以不加/bin/sh，psql直接嵌套实现与数据库的交互，无需穿过容器外壳）
createdb --username=root --owner=root simple_bank---创建简单数据库username用户身份连接，数据库拥有者owner
1、docker exec -it postgres12 createdb --username=root --owner=root simple_bank
2、docker exec -it postgres12 psql -U root simple_bank
dropdb XX:删除数据库
pqsl	XX：访问数据库控制台
exec------不返回记录

docker ps	展示正在运行的容器（container）
docker ps -a  	展示所有容器
docker stop XX	停止运行XX容器
docker start XX	开启XX容器
docker rm postgres12	（remove）删除容器（必须先停止）



 migrate -path db/migration -database "postgresql://root:wyx06151@localhost:5432/simple_bank?sslmode=disable" -verbose up
-path db/migration: 这个选项指定迁移文件的路径，即包含数据库迁移脚本的目录。
用户名 (root)、密码 (wyx06151)、主机 (localhost)、端口 (5432)、数据库名 (simple_bank)，以及禁用 SSL (sslmode=disable)。
-verbose: 这个选项会在执行过程中输出详细的日志信息，可以看到迁移的详细步骤。
up: 这是 migrate 工具的子命令，表示执行 "up" 操作，应用所有尚未应用的迁移，从而升级数据库模式。


sqlc generate ：生成数据库查询代码（db.go   models.go   account.sql.go)
db.go:	1、包含 dbtx接口，定义了 sql.DB 和 sql.Tx 对象都有的 4 个常用方法，可以自由地使用数据库或事务来执行查询
	2、New() 函数将 DBTX 作为输入并返回 Queries 对象
	3、WithTx（）允许查询实例与事务关联
models.go:包含模型的结构体定义，即每个表
account.sql.go:存放该表的增删查改和一些函数（测试断言？？）

go mod init github.com/techschool/simplebank(模块名）
go mod tidy   安装所有依赖项（外部库……）

 go test -v -cover ./...	使用 -v 选项打印详细日志，和 -cover 选项来测量代码覆盖率,./...运行所有包内测试